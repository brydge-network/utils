/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IBrydgeLPDeposit {
  export type SwapAndAddLiquidityParamsStruct = {
    user: PromiseOrValue<string>;
    uniswapV2Router02: PromiseOrValue<string>;
    inputToken: PromiseOrValue<string>;
    inputTokenAmount: PromiseOrValue<BigNumberish>;
    tokenA: PromiseOrValue<string>;
    tokenB: PromiseOrValue<string>;
    tokenASwapRouter: PromiseOrValue<string>;
    tokenBSwapRouter: PromiseOrValue<string>;
    deadline: PromiseOrValue<BigNumberish>;
  };

  export type SwapAndAddLiquidityParamsStructOutput = [
    string,
    string,
    string,
    BigNumber,
    string,
    string,
    string,
    string,
    BigNumber
  ] & {
    user: string;
    uniswapV2Router02: string;
    inputToken: string;
    inputTokenAmount: BigNumber;
    tokenA: string;
    tokenB: string;
    tokenASwapRouter: string;
    tokenBSwapRouter: string;
    deadline: BigNumber;
  };
}

export interface IBrydgeLPDepositInterface extends utils.Interface {
  functions: {
    "swapERC20AndAddLiquidity((address,address,address,uint256,address,address,address,address,uint256),bytes,bytes)": FunctionFragment;
    "swapNativeAndAddLiquidity((address,address,address,uint256,address,address,address,address,uint256),bytes,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "swapERC20AndAddLiquidity"
      | "swapNativeAndAddLiquidity"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "swapERC20AndAddLiquidity",
    values: [
      IBrydgeLPDeposit.SwapAndAddLiquidityParamsStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNativeAndAddLiquidity",
    values: [
      IBrydgeLPDeposit.SwapAndAddLiquidityParamsStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "swapERC20AndAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNativeAndAddLiquidity",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IBrydgeLPDeposit extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBrydgeLPDepositInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    swapERC20AndAddLiquidity(
      _params: IBrydgeLPDeposit.SwapAndAddLiquidityParamsStruct,
      _tokenASwapCalldata: PromiseOrValue<BytesLike>,
      _tokenBSwapCalldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapNativeAndAddLiquidity(
      _params: IBrydgeLPDeposit.SwapAndAddLiquidityParamsStruct,
      _tokenASwapCalldata: PromiseOrValue<BytesLike>,
      _tokenBSwapCalldata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  swapERC20AndAddLiquidity(
    _params: IBrydgeLPDeposit.SwapAndAddLiquidityParamsStruct,
    _tokenASwapCalldata: PromiseOrValue<BytesLike>,
    _tokenBSwapCalldata: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapNativeAndAddLiquidity(
    _params: IBrydgeLPDeposit.SwapAndAddLiquidityParamsStruct,
    _tokenASwapCalldata: PromiseOrValue<BytesLike>,
    _tokenBSwapCalldata: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    swapERC20AndAddLiquidity(
      _params: IBrydgeLPDeposit.SwapAndAddLiquidityParamsStruct,
      _tokenASwapCalldata: PromiseOrValue<BytesLike>,
      _tokenBSwapCalldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapNativeAndAddLiquidity(
      _params: IBrydgeLPDeposit.SwapAndAddLiquidityParamsStruct,
      _tokenASwapCalldata: PromiseOrValue<BytesLike>,
      _tokenBSwapCalldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    swapERC20AndAddLiquidity(
      _params: IBrydgeLPDeposit.SwapAndAddLiquidityParamsStruct,
      _tokenASwapCalldata: PromiseOrValue<BytesLike>,
      _tokenBSwapCalldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapNativeAndAddLiquidity(
      _params: IBrydgeLPDeposit.SwapAndAddLiquidityParamsStruct,
      _tokenASwapCalldata: PromiseOrValue<BytesLike>,
      _tokenBSwapCalldata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    swapERC20AndAddLiquidity(
      _params: IBrydgeLPDeposit.SwapAndAddLiquidityParamsStruct,
      _tokenASwapCalldata: PromiseOrValue<BytesLike>,
      _tokenBSwapCalldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapNativeAndAddLiquidity(
      _params: IBrydgeLPDeposit.SwapAndAddLiquidityParamsStruct,
      _tokenASwapCalldata: PromiseOrValue<BytesLike>,
      _tokenBSwapCalldata: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
