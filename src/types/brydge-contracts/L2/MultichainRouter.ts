/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Types {
  export type ICallStruct = {
    _to: PromiseOrValue<string>;
    _value: PromiseOrValue<BigNumberish>;
    _calldata: PromiseOrValue<BytesLike>;
  };

  export type ICallStructOutput = [string, BigNumber, string] & {
    _to: string;
    _value: BigNumber;
    _calldata: string;
  };
}

export declare namespace IStargateRouter {
  export type LzTxObjStruct = {
    dstGasForCall: PromiseOrValue<BigNumberish>;
    dstNativeAmount: PromiseOrValue<BigNumberish>;
    dstNativeAddr: PromiseOrValue<BytesLike>;
  };

  export type LzTxObjStructOutput = [BigNumber, BigNumber, string] & {
    dstGasForCall: BigNumber;
    dstNativeAmount: BigNumber;
    dstNativeAddr: string;
  };
}

export declare namespace IMultichainPortal {
  export type StargateArgsStruct = {
    dstChainId: PromiseOrValue<BigNumberish>;
    srcPoolId: PromiseOrValue<BigNumberish>;
    dstPoolId: PromiseOrValue<BigNumberish>;
    minAmountOut: PromiseOrValue<BigNumberish>;
    lzTxObj: IStargateRouter.LzTxObjStruct;
    receiver: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
  };

  export type StargateArgsStructOutput = [
    number,
    number,
    number,
    BigNumber,
    IStargateRouter.LzTxObjStructOutput,
    string,
    string
  ] & {
    dstChainId: number;
    srcPoolId: number;
    dstPoolId: number;
    minAmountOut: BigNumber;
    lzTxObj: IStargateRouter.LzTxObjStructOutput;
    receiver: string;
    data: string;
  };
}

export interface MultichainRouterInterface extends utils.Interface {
  functions: {
    "Portal()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "swapERC20AndCall(address,address,uint256,address,address,bytes,(address,uint256,bytes)[])": FunctionFragment;
    "swapERC20AndSend(uint256,uint256,address,address,address,bytes,(uint16,uint16,uint16,uint256,(uint256,uint256,bytes),address,bytes))": FunctionFragment;
    "swapNativeAndCall(address,address,address,bytes,(address,uint256,bytes)[])": FunctionFragment;
    "swapNativeAndSend(uint256,uint256,uint256,address,address,bytes,(uint16,uint16,uint16,uint256,(uint256,uint256,bytes),address,bytes))": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "usdc()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "Portal"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "swapERC20AndCall"
      | "swapERC20AndSend"
      | "swapNativeAndCall"
      | "swapNativeAndSend"
      | "transferOwnership"
      | "unpause"
      | "usdc"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "Portal", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapERC20AndCall",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      Types.ICallStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapERC20AndSend",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      IMultichainPortal.StargateArgsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNativeAndCall",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      Types.ICallStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNativeAndSend",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      IMultichainPortal.StargateArgsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;

  decodeFunctionResult(functionFragment: "Portal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapERC20AndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapERC20AndSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNativeAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNativeAndSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface MultichainRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultichainRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Portal(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapERC20AndCall(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<string>,
      swapRouter: PromiseOrValue<string>,
      swapArguments: PromiseOrValue<BytesLike>,
      calls: Types.ICallStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapERC20AndSend(
      amountIn: PromiseOrValue<BigNumberish>,
      amountUSDC: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      tokenIn: PromiseOrValue<string>,
      swapRouter: PromiseOrValue<string>,
      swapArguments: PromiseOrValue<BytesLike>,
      stargateArgs: IMultichainPortal.StargateArgsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapNativeAndCall(
      tokenOut: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      swapRouter: PromiseOrValue<string>,
      swapArguments: PromiseOrValue<BytesLike>,
      calls: Types.ICallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapNativeAndSend(
      amountIn: PromiseOrValue<BigNumberish>,
      amountUSDC: PromiseOrValue<BigNumberish>,
      lzFee: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<string>,
      swapRouter: PromiseOrValue<string>,
      swapArguments: PromiseOrValue<BytesLike>,
      stargateArgs: IMultichainPortal.StargateArgsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdc(overrides?: CallOverrides): Promise<[string]>;
  };

  Portal(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapERC20AndCall(
    tokenIn: PromiseOrValue<string>,
    tokenOut: PromiseOrValue<string>,
    amountIn: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<string>,
    swapRouter: PromiseOrValue<string>,
    swapArguments: PromiseOrValue<BytesLike>,
    calls: Types.ICallStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapERC20AndSend(
    amountIn: PromiseOrValue<BigNumberish>,
    amountUSDC: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<string>,
    tokenIn: PromiseOrValue<string>,
    swapRouter: PromiseOrValue<string>,
    swapArguments: PromiseOrValue<BytesLike>,
    stargateArgs: IMultichainPortal.StargateArgsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapNativeAndCall(
    tokenOut: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    swapRouter: PromiseOrValue<string>,
    swapArguments: PromiseOrValue<BytesLike>,
    calls: Types.ICallStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapNativeAndSend(
    amountIn: PromiseOrValue<BigNumberish>,
    amountUSDC: PromiseOrValue<BigNumberish>,
    lzFee: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<string>,
    swapRouter: PromiseOrValue<string>,
    swapArguments: PromiseOrValue<BytesLike>,
    stargateArgs: IMultichainPortal.StargateArgsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdc(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    Portal(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    swapERC20AndCall(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<string>,
      swapRouter: PromiseOrValue<string>,
      swapArguments: PromiseOrValue<BytesLike>,
      calls: Types.ICallStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    swapERC20AndSend(
      amountIn: PromiseOrValue<BigNumberish>,
      amountUSDC: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      tokenIn: PromiseOrValue<string>,
      swapRouter: PromiseOrValue<string>,
      swapArguments: PromiseOrValue<BytesLike>,
      stargateArgs: IMultichainPortal.StargateArgsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    swapNativeAndCall(
      tokenOut: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      swapRouter: PromiseOrValue<string>,
      swapArguments: PromiseOrValue<BytesLike>,
      calls: Types.ICallStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    swapNativeAndSend(
      amountIn: PromiseOrValue<BigNumberish>,
      amountUSDC: PromiseOrValue<BigNumberish>,
      lzFee: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<string>,
      swapRouter: PromiseOrValue<string>,
      swapArguments: PromiseOrValue<BytesLike>,
      stargateArgs: IMultichainPortal.StargateArgsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    usdc(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    Portal(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapERC20AndCall(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<string>,
      swapRouter: PromiseOrValue<string>,
      swapArguments: PromiseOrValue<BytesLike>,
      calls: Types.ICallStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapERC20AndSend(
      amountIn: PromiseOrValue<BigNumberish>,
      amountUSDC: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      tokenIn: PromiseOrValue<string>,
      swapRouter: PromiseOrValue<string>,
      swapArguments: PromiseOrValue<BytesLike>,
      stargateArgs: IMultichainPortal.StargateArgsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapNativeAndCall(
      tokenOut: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      swapRouter: PromiseOrValue<string>,
      swapArguments: PromiseOrValue<BytesLike>,
      calls: Types.ICallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapNativeAndSend(
      amountIn: PromiseOrValue<BigNumberish>,
      amountUSDC: PromiseOrValue<BigNumberish>,
      lzFee: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<string>,
      swapRouter: PromiseOrValue<string>,
      swapArguments: PromiseOrValue<BytesLike>,
      stargateArgs: IMultichainPortal.StargateArgsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdc(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    Portal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapERC20AndCall(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<string>,
      swapRouter: PromiseOrValue<string>,
      swapArguments: PromiseOrValue<BytesLike>,
      calls: Types.ICallStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapERC20AndSend(
      amountIn: PromiseOrValue<BigNumberish>,
      amountUSDC: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      tokenIn: PromiseOrValue<string>,
      swapRouter: PromiseOrValue<string>,
      swapArguments: PromiseOrValue<BytesLike>,
      stargateArgs: IMultichainPortal.StargateArgsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapNativeAndCall(
      tokenOut: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      swapRouter: PromiseOrValue<string>,
      swapArguments: PromiseOrValue<BytesLike>,
      calls: Types.ICallStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapNativeAndSend(
      amountIn: PromiseOrValue<BigNumberish>,
      amountUSDC: PromiseOrValue<BigNumberish>,
      lzFee: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<string>,
      swapRouter: PromiseOrValue<string>,
      swapArguments: PromiseOrValue<BytesLike>,
      stargateArgs: IMultichainPortal.StargateArgsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdc(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
