/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IBrydgeLPDeposit,
  IBrydgeLPDepositInterface,
} from "../../../L2/interfaces/IBrydgeLPDeposit";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "user",
            type: "address",
          },
          {
            internalType: "address",
            name: "uniswapV2Router02",
            type: "address",
          },
          {
            internalType: "address",
            name: "inputToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "inputTokenAmount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "tokenA",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenB",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenASwapRouter",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenBSwapRouter",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct IBrydgeLPDeposit.SwapAndAddLiquidityParams",
        name: "_params",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "_tokenASwapCalldata",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_tokenBSwapCalldata",
        type: "bytes",
      },
    ],
    name: "swapERC20AndAddLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "user",
            type: "address",
          },
          {
            internalType: "address",
            name: "uniswapV2Router02",
            type: "address",
          },
          {
            internalType: "address",
            name: "inputToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "inputTokenAmount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "tokenA",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenB",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenASwapRouter",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenBSwapRouter",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct IBrydgeLPDeposit.SwapAndAddLiquidityParams",
        name: "_params",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "_tokenASwapCalldata",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_tokenBSwapCalldata",
        type: "bytes",
      },
    ],
    name: "swapNativeAndAddLiquidity",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class IBrydgeLPDeposit__factory {
  static readonly abi = _abi;
  static createInterface(): IBrydgeLPDepositInterface {
    return new utils.Interface(_abi) as IBrydgeLPDepositInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IBrydgeLPDeposit {
    return new Contract(address, _abi, signerOrProvider) as IBrydgeLPDeposit;
  }
}
